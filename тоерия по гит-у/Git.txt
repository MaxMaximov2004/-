pwd - узнать текущее расположение (PRINT WORKING DIRECTORY)
cd - сменить директорию (PRINT WORKING DIRECTORY)
	сd ~ - сменить текущую дирректорию на родительскую
	cd .. - поднятся выше 
ls - вывести содержание директории (LIST DIRECTORY CONTAINS)
	флаги к ls:
	-a  <- показывает прям все подпаки и папки (в т.ч. и скрытые)
	
touch - создание нового файла
mkdir - создание новой папки (диретории)
	mkdir -p   <- создание вложенных папок 
Символы ~ и .. работают примерно точно также с mkdir и touch, так touch ~/file.<Расширение файла> создаёт файл в родительской диретории
а touch ../file создаёт файл на 1 папку выше (соответственно на 2 папки выше: touch ../../file)ьлвшкcd
cp <откуда> <куда>	 -копирует указанные файлы
mv <откуда> <куда>	 -перемещает указанные файлы (p.s при перемещении файла в указанную папку небходимо ставить .  :mv 1234.txt ./"some folder" - перемещение файла 1234 в папку some folder
cat <файл>  - выводит содержимое файла
rm <файл>  - удаляет файл
rm -r <дирректория>  - удаляет всё что в директории
rmdir  - удаляет директорию (пустую)
/*Все удаления происходят безвозвратно*/

command_1 && command_2  <- выполнить сразу 2 ( и более)  комманды


-----------=========== GIT ==============--------------

git init <- создать репозиторий в текущей папке
	rm -rf .git <- "Разгитить" текущую папку, т.е. удалить историю изменений, хранящихся в папке .git
git status <- Узнать текущий статус репозитория
git add <- указываем файлы на сохранение (git add -all  <- сохранение всех файлов)
git commit <- фиксация изменений в ветке (ключ -m <- позволяет присвоить коммиту сообщение)
git log <-просмотр всех изменений в ветке
	git log --oneline <-просмотр всех изменений в ветке, одной строкой

----------------=================Делимся репозиториями=============-----------------
в домашнем директории прописываем (или я думаю в любой другой, нам необходимо сгенерировать SSH - ключи и привязать их к гит-хабу)

ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" 
или если ничего не получилось:
ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" 

(посмотреть сгенерировалось ли всё ls -a ~/.ssh )
теперь скопирум публичный ключ:    clip < ~/.ssh/id_ed25519.pub  и привяжем  это к гитхабу, на гитхабе: настройки->SSH и прочие ключи->новый SSH ключ копируем в поле Key

ssh -T git@github.com <- проверка на првилность привязанного ключа, а именно обращение к сайту github

связывание локального и github репозитория:
1) идём в репозиторий на github и получаем его url (не забываем что он должен быть для SSH, а не для HTTPS)
2) В локальном репозитории прописываем: git remote add origin + url удалённого репозитория
3) Можно убедится, что всё связанно: git remote -v

отправка на удалённый репозиторий:
(если это первая отправка): git push -u origin master
а так git push

