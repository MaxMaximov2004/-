Позволяет создовать ФУНКЦИЮ-ШАБЛОН, которая может работать с несколькими типами данных для одной функции.

Ещё несколько слов о шаблонах (от более опытного котёночка) {Р.Лаффорре ст 640} шаблоны весьма "энергоэффетивны" т.к. не создают лишних "версий" шаблонных функций, так если ты определил шаблонную функцию, и вызвал её с типами int или double, то в программе будет присутсвовать только версии функции для int или double, ни=для каких float или long шаблонной функции не будет, пока они не будут вызванны явным образом в программе, за счёт этого явно экономится память. 
Также шаблоны можно использовать с пользовательскими типами данных, если для них определенны нужные операторы (используеммые в шаблонной функции).
Помимо этого аргументы шаблонной функции должны быть соглосованны (Р Лаффоре ст 645).
 
///////////////////////////////////////////
#include <iostream>
#include <math.h>
#include <string>
#include <windows.h>

using namespace std;


template < class Type> Type proiz( Type a) {
    Type b;
    b=a*10+a;
return b;
}

int main(int argc,char* argv[])
{

    cout<<proiz<int>(9)<<" "<<proiz<double>(9.8)<<endl;
    return 0;
}
//////////////////////////////////////////////