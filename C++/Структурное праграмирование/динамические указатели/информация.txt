Умные (интелектуальные, smart pointers) указатели нужны для облегчения работы с динамической памятью, а именно:
они могут автоматически удалять объекты на которые они ссылаются и предотвращать утечки памяти (на самом деле более удобное выделение памяти и её освобождение)

источник:https://metanit.com/cpp/tutorial/11.1.php

код:

#include <iostream>
#include <memory>//для работы динамических указателей

int main()
{
    std::unique_ptr<double> q{ new double(1.234) }; //стандарт C++ 14 создание умного указателя вместе с объектом в динамической памяти
    //std::cout << q << "\n\n"; //получение адресса 
    std::cout << *q << "\n\n";

    std::unique_ptr<double>d{ std::make_unique<double>(2.256) }; //стандарт C++ 20
    std::cout << *d << "\n\n";

    /*работа с массивом*/
    int n = 5 ;   
    auto p {std::make_unique<int[]>(n)}; //создание "умного" указателя на динамический массив

    p[0] = n; p[1] = n * 2;
    std::cout << p[0] << " " << p[1] << " " << p[2] << "\n";

    //p.reset();//освобождение места
    p.reset( new int(12234)); //освобождение места и создание нового объекта в динамической памяти

    if(p==nullptr){ std::cout << "Memory is free\n"; } else { std::cout << p[0]<<"\n"; }

}