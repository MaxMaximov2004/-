1) при перегрузки стандартных операций следует не отходить от их изначального смысла (если + то он должен что-то складывать)
2) при выделении динамической памяти её следует освобождать через деструктор
3) поля объектов для безопасности следует закрывать (private-protected(если нужен доступ производным классам))
4) если класс работает с системными рессурсами (памятью и файлами), следует перегружать оператор присваивания и конструктор копирования
5)Динамический полиморфизм обеспечивается за счёт использования виртуальных функций, наследования и указателя на родительский класс (корневой), за счёт того что этот указатель может ссылаться на любой класс в иерархии и виртуальных функций можно вызывать методы конкретных классов тех объектов, на которых ссылается данный указатель.
	5.а) Для контралированния иерархии полезно использовать typeid (#include <typeinfo>)
6)В C ++ конструкторы и деструкторы не наследуются. Однако они вызываются, когда дочерний класс инициализирует свой объект. Конструкторы вызываются один за другим иерархически, начиная с базового класса и заканчивая последним производным классом. Деструкторы вызываются в обратном порядке.